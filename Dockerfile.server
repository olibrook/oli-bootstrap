# See https://turbo.build/repo/docs/guides/tools/docker
FROM node:22-alpine AS alpine-base

# Allow scripts to detect we're in the context of Docker.
ENV DOCKER=1

# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
FROM alpine-base AS base
RUN apk update
RUN apk add --no-cache libc6-compat
RUN npm install -g turbo@2.4.4 pnpm@8.9.0

WORKDIR /oliBootstrap

# Doing `turbo prune` lets us handle pnpm install more efficiently
FROM base AS pruner
COPY . .
RUN turbo prune @oliBootstrap/server @oliBootstrap/web --docker

FROM base AS builder
# First install dependencies (as they change less often)
COPY --from=pruner /oliBootstrap/out/json/ .
# Copy scripts directory for preinstall script
COPY scripts/ ./scripts/
RUN pnpm install --frozen-lockfile

# Build the project and its dependencies
COPY --from=pruner /oliBootstrap/out/full/ .

# Use pnpm deploy to prune only prod dependencies after the build.
RUN pnpm turbo build
RUN pnpm --filter @oliBootstrap/server deploy --prod --frozen-lockfile /oliBootstrap/out/server
RUN pnpm --filter @oliBootstrap/web deploy --prod --frozen-lockfile /oliBootstrap/out/web


FROM base AS runner
WORKDIR /oliBootstrap

# Don't run production as root
RUN addgroup --system --gid 1001 expressjs
RUN adduser --system --uid 1001 expressjs

# Allow the expressjs user to bind to privileged ports such that we can run the server on port 80.
RUN apk add --no-cache libcap && setcap 'cap_net_bind_service=+ep' /usr/local/bin/node

USER expressjs

# Copy assets, recreate the repo directory structure for sanity
COPY --from=builder /oliBootstrap/out/server /oliBootstrap/apps/server
COPY --from=builder /oliBootstrap/out/web /oliBootstrap/apps/web

CMD node apps/server/dist/server.js